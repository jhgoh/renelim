/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

// Your description goes here...

#include "Riostream.h"

#include "PiecewiseLinearPdf.h"
#include "RooAbsCategory.h"
#include "RooAbsReal.h"
// #include <math.h>
#include "TMath.h"

#include <algorithm>

ClassImp(PiecewiseLinearPdf);

PiecewiseLinearPdf::PiecewiseLinearPdf(const char *name, const char *title, RooAbsReal &x,
                                       const int n, const double *xx, const double *yy)
    : RooAbsPdf(name, title), x_("x", "x", this, x) {
  set(n, xx, yy);
}

PiecewiseLinearPdf::PiecewiseLinearPdf(const PiecewiseLinearPdf &other, const char *name)
    : RooAbsPdf(other, name), x_("x", this, other.x_), xx_(other.xx_), yy_(other.yy_) {}

void PiecewiseLinearPdf::set(const int n, const double *xx, const double *yy) {
  xx_.clear();
  yy_.clear();
  for (int i = 0; i < n; ++i) {
    xx_.push_back(xx[i]);
    yy_.push_back(yy[i]);
  }
}

double PiecewiseLinearPdf::evaluate() const {
  const double x = x_->getVal();
  auto itr = std::lower_bound(xx_.begin(), xx_.end(), x);
  if (itr == xx_.begin() or itr == xx_.end()) {
    if (x == xx_[0])
      return yy_[0]; // At boundary
    else
      return 0; // Outside of the boundary
  }

  const size_t idx = itr - xx_.begin();
  const double x2 = *itr, x1 = *(itr - 1);
  const double y2 = yy_[idx], y1 = yy_[idx - 1];

  return y1 + (y2 - y1) / (x2 - x1) * (x - x1);
}
